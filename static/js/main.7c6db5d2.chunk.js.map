{"version":3,"sources":["store.js","User.js","TodoItem.js","TodoList.js","getDataApi.js","App.js","index.js"],"names":["titles","store","createStore","state","action","type","Object","objectSpread2","fullTodos","value","currentSortingTitle","User","_ref","user","react_default","a","createElement","name","TodoItem","todo","removeTodo","map","title","key","concat","id","completed","src_User","className","onClick","TodoList","todos","sortingTitle","setSortBy","toUpperCase","cn","table__heading--selected","src_TodoItem","getDataFromServer","URL","fetch","then","response","json","getTodosWithUsers","users","find","person","userId","connect","dispatch","setFullTodos","newFullTodos","setSortingTitle","newSortingTitle","_useState","useState","_useState2","slicedToArray","isLoading","setLoading","_useState3","_useState4","isError","setError","loadTodosFromServer","_ref2","_ref3","regenerator_default","async","_context","prev","next","awrap","Promise","all","sent","t0","stop","length","src_TodoList","toConsumableArray","reverse","sort","firstTodo","secondTodo","localeCompare","Number","filter","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"kNAKaA,EAAS,CAAC,KAAM,QAAS,YAAa,OAAQ,UA6B5CC,EAFDC,YAjBE,SAACC,EAAOC,GACtB,OAAQA,EAAOC,MACb,IAL0B,eAMxB,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACFH,EADL,CAEEK,UAAWJ,EAAOK,QAEtB,IAT6B,kBAU3B,OAAOH,OAAAC,EAAA,EAAAD,CAAA,GACFH,EADL,CAEEO,oBAAqBN,EAAOK,QAEhC,QACE,OAAON,IArBQ,CACnBK,UAAW,GACXE,oBAAqB,6DCIRC,EAVF,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OACXC,EAAAC,EAAAC,cAAA,UAAKH,EAAKI,OC4CGC,EA3CE,SAAAN,GAAA,IAAGO,EAAHP,EAAGO,KAAMC,EAATR,EAASQ,WAAT,OACfN,EAAAC,EAAAC,cAAA,UACGhB,EAAOqB,IAAI,SAACC,GACX,OAAQA,GACN,IAAK,YACH,OACER,EAAAC,EAAAC,cAAA,MAAIO,IAAG,GAAAC,OAAKF,GAALE,OAAaL,EAAKM,KAAON,EAAKO,UAAY,IAAM,KAE3D,IAAK,OACH,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,CAAMJ,IAAG,GAAAC,OAAKF,GAALE,OAAaL,EAAKM,IAAMZ,KAAMM,EAAKN,OACrD,IAAK,SACH,OACEC,EAAAC,EAAAC,cAAA,MAAIO,IAAG,GAAAC,OAAKF,GAALE,OAAaL,EAAKM,KACvBX,EAAAC,EAAAC,cAAA,UACEX,KAAK,SACLuB,UAAU,uBACVC,QAAS,WACPT,EAAWD,EAAKM,MAJpB,MAWN,QACE,OAAQX,EAAAC,EAAAC,cAAA,MAAIO,IAAG,GAAAC,OAAKF,GAALE,OAAaL,EAAKM,KAAON,EAAKG,SCwBxCQ,EAhDE,SAAAlB,GAAA,IAAGmB,EAAHnB,EAAGmB,MAAOC,EAAVpB,EAAUoB,aAAcC,EAAxBrB,EAAwBqB,UAAWb,EAAnCR,EAAmCQ,WAAnC,OACfN,EAAAC,EAAAC,cAAA,SAAOY,UAAU,oBACfd,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACGhB,EAAOqB,IAAI,SAACC,GACX,OAAQA,GACN,IAAK,SACH,OACER,EAAAC,EAAAC,cAAA,MACEO,IAAKD,EACLM,UAAU,kBAETN,EAAMY,eAGb,QACE,OACEpB,EAAAC,EAAAC,cAAA,MACEO,IAAKD,EACLO,QAAS,kBAAMI,EAAUX,IACzBM,UAAWO,IACT,iBACA,2BACA,CAAEC,2BAA4Bd,IAAUU,KAGzCV,EAAMY,oBAOrBpB,EAAAC,EAAAC,cAAA,aACGe,EAAMV,IAAI,SAAAF,GAAI,OACbL,EAAAC,EAAAC,cAACqB,EAAD,CAAUd,IAAKJ,EAAKM,GAAIN,KAAMA,EAAMC,WAAYA,SCrCzCkB,EAJW,SAAAC,GAAG,OAC3BC,MAAMD,GAAKE,KAAK,SAAAC,GAAQ,OAAIA,EAASC,UCMjCC,EAAoB,SAACb,EAAOc,GAAR,OACxBd,EAAMV,IAAI,SAAAF,GAAI,OAAAb,OAAAC,EAAA,EAAAD,CAAA,GACTa,EADS,CAEZN,KAAMgC,EAAMC,KAAK,SAAAC,GAAM,OAAIA,EAAOtB,KAAON,EAAK6B,cA0HnCC,cA/BM,SAAA9C,GAAK,MAAK,CAC7BK,UAAWL,EAAMK,UACjBE,oBAAqBP,EAAMO,sBAGL,SAAAwC,GAAQ,MAAK,CACnCC,aAAc,SAAAC,GAAY,OAAIF,EAAS,CACrC7C,KLhG0B,eKiG1BI,MAAO2C,KAETC,gBAAiB,SAAAC,GAAe,OAAIJ,EAAS,CAC3C7C,KLnG6B,kBKoG7BI,MAAO6C,OAmBIL,CAtHH,SAAArC,GACiC,IAD9BJ,EAC8BI,EAD9BJ,UAAW2C,EACmBvC,EADnBuC,aACxBzC,EAA2CE,EAA3CF,oBAAqB2C,EAAsBzC,EAAtByC,gBAAsBE,EACXC,oBAAS,GADEC,EAAAnD,OAAAoD,EAAA,EAAApD,CAAAiD,EAAA,GACpCI,EADoCF,EAAA,GACzBG,EADyBH,EAAA,GAAAI,EAEfL,oBAAS,GAFMM,EAAAxD,OAAAoD,EAAA,EAAApD,CAAAuD,EAAA,GAEpCE,EAFoCD,EAAA,GAE3BE,EAF2BF,EAAA,GAIrCG,EAAsB,eAAAC,EAAAC,EAAApC,EAAAc,EAAA,OAAAuB,EAAArD,EAAAsD,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAExBP,GAAS,GACTJ,GAAW,GAHaU,EAAAE,KAAA,EAAAJ,EAAArD,EAAA0D,MAKKC,QAAQC,IACnC,CAACrC,ELvBe,8CKuBcA,ELtBd,iDKgBM,OAAA4B,EAAAI,EAAAM,KAAAT,EAAA7D,OAAAoD,EAAA,EAAApD,CAAA4D,EAAA,GAKjBnC,EALiBoC,EAAA,GAKVtB,EALUsB,EAAA,GASxBhB,EAAaP,EAAkBb,EAAOc,IATdyB,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAO,GAAAP,EAAA,SAWxBN,GAAS,GACTb,EAAa,IAZW,QAe1BS,GAAW,GAfe,yBAAAU,EAAAQ,SAAA,qBA8C5B,OACEhE,EAAAC,EAAAC,cAAA,OAAKY,UAAU,aACS,IAArBpB,EAAUuE,SAAiBhB,IAAYJ,GACtC7C,EAAAC,EAAAC,cAAA,UACEX,KAAK,SACLuB,UAAU,oBACVC,QAASoC,GAHX,cASDN,GAAc7C,EAAAC,EAAAC,cAAA,KAAGY,UAAU,2BAAb,cAEO,IAArBpB,EAAUuE,QAAgBhB,IAAYJ,GACrC7C,EAAAC,EAAAC,cAAA,UACEX,KAAK,SACLuB,UAAU,oBACVC,QAASoC,GAHX,aAQDzD,EAAUuE,OAAS,GAEhBjE,EAAAC,EAAAC,cAACgE,EAAD,CACEjD,MAAOvB,EACPwB,aAActB,EACduB,UAxDQ,SAACX,GAEf6B,EADEzC,IAAwBY,EACbhB,OAAA2E,EAAA,EAAA3E,CAAIE,GAAW0E,UACT,SAAV5D,EACIhB,OAAA2E,EAAA,EAAA3E,CAAIE,GACd2E,KAAK,SAACC,EAAWC,GAAZ,OACJD,EAAUvE,KAAKI,KAAKqE,cAAcD,EAAWxE,KAAKI,QAGzCX,OAAA2E,EAAA,EAAA3E,CAAIE,GAAW2E,KAAK,SAACC,EAAWC,GAC3C,cAAeD,EAAU9D,IACvB,IAAK,SACH,OAAO8D,EAAU9D,GAAOgE,cAAcD,EAAW/D,IACnD,IAAK,UACH,OAAOiE,OAAOF,EAAW/D,IAAUiE,OAAOH,EAAU9D,IACtD,QACE,OAAO8D,EAAU9D,GAAS+D,EAAW/D,OAK7C+B,EAAgB/B,IAoCRF,WAjCS,SAACK,GAClB0B,EAAa3C,EAAUgF,OAAO,SAAArE,GAAI,OAAIA,EAAKM,KAAOA,WCvDtDgE,IAASC,OACP5E,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAU1F,MAAOA,GACfa,EAAAC,EAAAC,cAAC4E,EAAD,OAEFC,SAASC,eAAe","file":"static/js/main.7c6db5d2.chunk.js","sourcesContent":["import { createStore } from 'redux';\n\nexport const todosURL = 'https://jsonplaceholder.typicode.com/todos';\nexport const usersURL = 'https://jsonplaceholder.typicode.com/users';\n\nexport const titles = ['id', 'title', 'completed', 'user', 'remove'];\n\nconst initialState = {\n  fullTodos: [],\n  currentSortingTitle: '',\n};\n\nexport const SET_FULL_TODOS = 'setFullTodos';\nexport const SET_SORTING_TITLE = 'setSortingTitle';\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case SET_FULL_TODOS:\n      return {\n        ...state,\n        fullTodos: action.value,\n      };\n    case SET_SORTING_TITLE:\n      return {\n        ...state,\n        currentSortingTitle: action.value,\n      };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer, initialState);\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst User = ({ user }) => (\n  <td>{user.name}</td>\n);\n\nUser.propTypes = {\n  user: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default User;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { titles } from './store';\nimport User from './User';\n\nconst TodoItem = ({ todo, removeTodo }) => (\n  <tr>\n    {titles.map((title) => {\n      switch (title) {\n        case 'completed':\n          return (\n            <td key={`${title}${todo.id}`}>{todo.completed ? '+' : '-'}</td>\n          );\n        case 'user':\n          return <User key={`${title}${todo.id}`} user={todo.user} />;\n        case 'remove':\n          return (\n            <td key={`${title}${todo.id}`}>\n              <button\n                type=\"button\"\n                className=\"table__remove-button\"\n                onClick={() => {\n                  removeTodo(todo.id);\n                }}\n              >\n                x\n              </button>\n            </td>\n          );\n        default:\n          return (<td key={`${title}${todo.id}`}>{todo[title]}</td>);\n      }\n    })}\n  </tr>\n);\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n    user: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n  removeTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport TodoItem from './TodoItem';\nimport { titles } from './store';\n\nconst TodoList = ({ todos, sortingTitle, setSortBy, removeTodo }) => (\n  <table className=\"todo-list__table\">\n    <thead>\n      <tr>\n        {titles.map((title) => {\n          switch (title) {\n            case 'remove':\n              return (\n                <th\n                  key={title}\n                  className=\"table__heading\"\n                >\n                  {title.toUpperCase()}\n                </th>\n              );\n            default:\n              return (\n                <th\n                  key={title}\n                  onClick={() => setSortBy(title)}\n                  className={cn(\n                    'table__heading',\n                    'table__heading--sortable',\n                    { 'table__heading--selected': title === sortingTitle }\n                  )}\n                >\n                  {title.toUpperCase()}\n                </th>\n              );\n          }\n        })}\n      </tr>\n    </thead>\n    <tbody>\n      {todos.map(todo => (\n        <TodoItem key={todo.id} todo={todo} removeTodo={removeTodo} />\n      ))}\n    </tbody>\n  </table>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  sortingTitle: PropTypes.string.isRequired,\n  setSortBy: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","const getDataFromServer = URL => (\n  fetch(URL).then(response => response.json())\n);\n\nexport default getDataFromServer;\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport TodoList from './TodoList';\nimport getDataFromServer from './getDataApi';\nimport { todosURL, usersURL, SET_SORTING_TITLE, SET_FULL_TODOS } from './store';\n\nconst getTodosWithUsers = (todos, users) => (\n  todos.map(todo => ({\n    ...todo,\n    user: users.find(person => person.id === todo.userId),\n  }))\n);\n\nconst App = ({ fullTodos, setFullTodos,\n  currentSortingTitle, setSortingTitle }) => {\n  const [isLoading, setLoading] = useState(false);\n  const [isError, setError] = useState(false);\n\n  const loadTodosFromServer = async() => {\n    try {\n      setError(false);\n      setLoading(true);\n\n      const [todos, users] = await Promise.all(\n        [getDataFromServer(todosURL), getDataFromServer(usersURL)]\n      );\n\n      setFullTodos(getTodosWithUsers(todos, users));\n    } catch {\n      setError(true);\n      setFullTodos([]);\n    }\n\n    setLoading(false);\n  };\n\n  const setSortBy = (title) => {\n    if (currentSortingTitle === title) {\n      setFullTodos([...fullTodos].reverse());\n    } else if (title === 'user') {\n      setFullTodos([...fullTodos]\n        .sort((firstTodo, secondTodo) => (\n          firstTodo.user.name.localeCompare(secondTodo.user.name)\n        )));\n    } else {\n      setFullTodos([...fullTodos].sort((firstTodo, secondTodo) => {\n        switch (typeof firstTodo[title]) {\n          case 'string':\n            return firstTodo[title].localeCompare(secondTodo[title]);\n          case 'boolean':\n            return Number(secondTodo[title]) - Number(firstTodo[title]);\n          default:\n            return firstTodo[title] - secondTodo[title];\n        }\n      }));\n    }\n\n    setSortingTitle(title);\n  };\n\n  const removeTodo = (id) => {\n    setFullTodos(fullTodos.filter(todo => todo.id !== id));\n  };\n\n  return (\n    <div className=\"todo-list\">\n      {fullTodos.length === 0 && !isError && !isLoading && (\n        <button\n          type=\"button\"\n          className=\"todo-list__button\"\n          onClick={loadTodosFromServer}\n        >\n          Load Todos\n        </button>\n      )}\n\n      {isLoading && (<p className=\"todo-list__loading-text\">Loading...</p>)}\n\n      {fullTodos.length === 0 && isError && !isLoading && (\n        <button\n          type=\"button\"\n          className=\"todo-list__button\"\n          onClick={loadTodosFromServer}\n        >\n          Try again\n        </button>\n      )}\n      {fullTodos.length > 0\n        && (\n          <TodoList\n            todos={fullTodos}\n            sortingTitle={currentSortingTitle}\n            setSortBy={setSortBy}\n            removeTodo={removeTodo}\n          />\n        )}\n    </div>\n  );\n};\n\nconst getExtraData = state => ({\n  fullTodos: state.fullTodos,\n  currentSortingTitle: state.currentSortingTitle,\n});\n\nconst getExtraMethods = dispatch => ({\n  setFullTodos: newFullTodos => dispatch({\n    type: SET_FULL_TODOS,\n    value: newFullTodos,\n  }),\n  setSortingTitle: newSortingTitle => dispatch({\n    type: SET_SORTING_TITLE,\n    value: newSortingTitle,\n  }),\n});\n\nApp.propTypes = {\n  fullTodos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    userId: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.boolean,\n    user: PropTypes.shape({\n      name: PropTypes.string,\n    }),\n  })).isRequired,\n  setFullTodos: PropTypes.func.isRequired,\n  currentSortingTitle: PropTypes.string.isRequired,\n  setSortingTitle: PropTypes.func.isRequired,\n};\n\nexport default connect(getExtraData, getExtraMethods)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}